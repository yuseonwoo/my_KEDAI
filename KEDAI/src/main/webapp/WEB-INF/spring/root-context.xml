<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- ==== #15. myBatis(JDBC)설정 연결문자열 설정하기  ==== -->
   	<!-- DBCP 2.x를 위한 DataSource 객체 -->
   	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
    	<property name="driverClassName" value="net.sf.log4jdbc.DriverSpy" />
      	<!-- 연결해야할 DB 의 ip 주소이다. -->
      	<!-- 
      	<property name="url" value="jdbc:log4jdbc:oracle:thin:@//211.238.142.209:1521/xe" /> 
      	 -->	
      	<property name="url" value="jdbc:log4jdbc:oracle:thin:@//127.0.0.1:1521/xe" /> 
      	<property name="username" value="final_orauser5" />
      	<property name="password" value="gclass" />
      
      	<property name="initialSize" value="20"/> <!-- BasicDataSource 클래스 생성 후 최초로 getConnection() 메소드를 호출할 때 커넥션 풀에 채워 넣을 커넥션 개수(default=0). initialSize 값이 maxTotal 값보다 커버리면 논리적으로 오류가 있는 설정이다. -->   
      	<property name="maxTotal" value="20"/>    <!-- 동시에 사용할 수 있는 최대 커넥션 개수(default=8). initialSize 값과 maxTotal 값과 maxIdle 값과 minIdle 값 4개 모두 동일한 값으로 통일해도 무방하다. 커넥션 개수와 관련된 가장 중요한 성능 요소는 일반적으로 커넥션의 최대 개수이다 -->  
      	<property name="maxIdle" value="20"/>     <!-- Connection Pool에 반납할 때, 최대로 유지될 수 있는 커넥션 개수(default=8). maxTotal 값 과 maxIdle 값이 같은 것이 바람직하다. 왜냐하면, 만약에 maxTotal 값이 20 이고 maxIdle 값이 15 일때, 15개의 커넥션이 모두 사용중일 때 커넥션이 한개 더 생긴다면, maxTotal 은 아직 여유가 있으므로 프로세스는 계속 진행되고, 그러면 새로 연결을 하고, 반환하려고 하는데 15개의 커넥션이 모두 사용중 이라서 반납할 수 있는 여유공간이 없이 이미 꽉차 있으므로 그 커넥션은 반납하지 못하고 그냥 닫히게 된다. 15개의 커넥션이 계속해서 사용중이라면, 계속해서 새로 연결, 다시 닫기가 반복되므로 DBCP 를 사용하는 의미가 아예 없어진다. 그러므로  maxIdle 값과  maxTotal 값은 같은 값이거나 큰 차이가 없어야 바람직하다. -->     
      	<property name="minIdle" value="20"/>     <!-- Connection Pool에 반납할 때, 최소한으로 유지할 커넥션 개수(default=0). minIdle 값이 maxIdle 값  보다 커버리면 논리적으로 오류가 있는 설정이다. --> 
           
      	<property name="maxWaitMillis" value="10000" />    <!-- pool이 고갈되었을 경우 최대 대기 시간(ms단위, default=-1 : 무한정) -->
      	<property name="defaultAutoCommit" value="true" /> <!-- defaultAutoCommit 속성은 true가 기본값이다. false 이면 수동 commit 이다. --> 
	</bean>
	
	<!-- ==== #15. myBatis(JDBC)설정 mapper 파일 위치 지정하기  ==== -->
   	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="mapperLocations" value="classpath*:com/spring/app/mapper/*.xml" /> 
   <!-- <property name="configLocation" value="classpath:com/spring/app/mybatisconfig/mybatis-config.xml" /> --> <!-- mybatis-config.xml에 대한 정보를 기술함 --> 
  		<!-- 또는 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" /> <!-- mybatis-config.xml에 대한 정보를 기술한다. --> 
      	<property name="dataSource" ref="dataSource" /> <!-- ref 는 <bean id="dataSource"> 을 가리키는 것이다. -->
   	</bean>
   
   	<!-- ==== #15. myBatis(JDBC)설정 sqlSessionTemplate 의존 객체 설정 ==== -->
   	<bean id="sqlsession" class="org.mybatis.spring.SqlSessionTemplate"> 
    	<constructor-arg index="0" ref="sqlSessionFactory" /> <!-- ref 는 <bean id="sqlSessionFactory"> 을 가리키는 것이다. -->
   	</bean>
	
	<!-- 
		==== Mapper Interface 빈등록 하기 ==== 
		Mapper Interface(myBatis 3.0 이상 버전 부터 사용가능함)는 DAO 클래스를 생략하고 mapper xml파일 과 DAO 인터페이스를 직접 연결해주는 방식이다. 
        root-context.xml에 <mybatis-spring:scan base-package="DAO Mapper 인터페이스의 패키지경로" />를 등록해야 한다.
    -->
	
	<!-- ==== #16. 트랜잭션 처리를 위해서 아래와 같이 트랜잭션매니저 객체를 bean 으로 등록해야 한다. ==== -->
   	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
   	</bean>
   	<tx:annotation-driven transaction-manager="transactionManager" />
      
   	<!-- ==== #17. jackson 과 관련된 기능을 사용하기 위해 빈을 등록한다. ==== --> <!-- 우리는 json 을 사용한다. -->
   	<bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
</beans>