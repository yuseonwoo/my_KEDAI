<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- 
		==== #18. 이미지, 동영상, js, css 파일 등이 위치하는 경로를 의미한다.
                                             그 경로는 /webapp/resources 아래에 위치하거나 또는 /webapp/resources 아래에 폴더를 만들어서 저장시켜야 한다. ==== 
	-->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- ==== #19. 엑셀파일다운로드를 위해  BeanNameViewResolver 추가하기 ==== -->
    <!-- 
		스프링 프레임워크(Spring Framework)에서 JSP가 아닌 컨트롤러를 호출하여 파일을 다운로드 하려면 다음과 같은 단계를 거쳐야 한다. 
        BeanNameViewResolver 뷰 리졸버를 추가한 후 파일 다운로드를 처리해줄 빈을 등록한다.
		쉽게 생각해서 파일 다운로드 처리를 해주는 view 페이지 라고 생각하면 된다. 
    -->
    <beans:bean id="excelDownloadView" class="com.spring.app.excel.ExcelDownloadView" /> 
	<beans:bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="0" />
    </beans:bean> 
	
	<!-- ==== #20. 실행시 모든 페이지에 기본틀이 되어지는 틀을 배치하기 위한 템플릿 프레임워크인 TilesViewResolver 를 사용하기 위해 빈으로 등록한다. ==== -->
   	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
                 <beans:value>/WEB-INF/tiles/tiles-layout.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="1"/> <!-- view 단에서 기본값을 사용할지  tiles 를 사용할지 우선순위를 정해주는 것이다. 우선순위를 정해주지 않으면 충돌이 난다. -->
    </beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- ==== #21. 파일업로드 및 파일다운로드에 필요한 의존객체 설정하기 ==== -->
   	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
   	<!-- 자바파일이 UTF-8로 저장된 경우 한글파일명이 깨지지 않게하기 위해 -->
		<beans:property name="defaultEncoding" value="utf-8" />
    	<beans:property name="maxUploadSize" value="10485760" />
   	</beans:bean> 
	
	<!-- ==== #44. 양방향 암호화 알고리즘인 AES256 를 사용하여 복호화 하기 위한 클래스(파라미터가 있는 생성자) 의존객체 bean 생성하기 ==== --> 
   	<beans:bean id="aES256" class="com.spring.app.common.AES256"> 
    	<beans:constructor-arg> 
        	<beans:value>abcd0070#gclass$</beans:value> <!-- abcd0070#gclass$ 은 각자 com.spring.app.common.SecretMyKey 에 사용되던 암호화/복호화 키 이다. -->   
      	</beans:constructor-arg>
   	</beans:bean>
   	
   	<!-- ==== #18. bean 으로 등록될 @Component 클래스가 위치하는 패키지명 지정하기 ==== -->
	<context:component-scan base-package="com.spring.app" /> <!-- 이 경로에 있는 클래스 파일은 WAS가 구동되면서 @Component 가 붙어있는 파일을 자동적으로 bean 에 올라가도록 한다. -->
	
	<!-- 
		==== #22. 일단 스프링에서 트랜잭션 처리를 하기 위해서는
                먼저 src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml 파일에
        Namespaces 에 aop 를 체크를 하고, 아래와 같이 트랜잭션 처리를 위한 aop 포인트컷을 등록을 해야 한다.    
       	- 아래의 <aop:aspectj-autoproxy />가 AOP 관련 어노테이션 동작이 가능하게 설정해주는 것임. ====
    -->   
   	<!-- AOP 관련 어노테이션 동작이 가능하게 설정 -->   
   	<aop:aspectj-autoproxy /> <!-- 추가 -->        
    
   	<aop:config proxy-target-class="true">
    	<aop:pointcut id="controllerOperation" expression="execution(public * com.spring.app..*Controller.*(..))" />
    </aop:config>
    
    <!-- ======================== #인터셉터관련2. 시작  ======================== -->
    <beans:bean id="loginCheckInterceptor" class="com.spring.app.interceptor.controller.LoginCheckInterceptor" />
    <beans:bean id="adminLoginCheckInterceptor" class="com.spring.app.interceptor.controller.AdminLoginCheckInterceptor" />
    
   	<mvc:interceptors>
   		<mvc:interceptor>
   			<mvc:mapping path="/**" />
   			<mvc:exclude-mapping path="/" />
   			<mvc:exclude-mapping path="/login.kedai" />
   			<mvc:exclude-mapping path="/loginEnd.kedai" />
   			<mvc:exclude-mapping path="/logout.kedai" />
   			<mvc:exclude-mapping path="/login/idPwdFind.kedai" />
   			<mvc:exclude-mapping path="/login/idFind.kedai" />
   			<mvc:exclude-mapping path="/login/pwdFind.kedai" />
   			<mvc:exclude-mapping path="/login/verifyCertification.kedai" />
   			<mvc:exclude-mapping path="/login/pwdUpdateEnd.kedai" />
   			<beans:ref bean="loginCheckInterceptor" />
   		</mvc:interceptor>
   		
   		<mvc:interceptor>
   			<mvc:mapping path="/admin/**" />
   			<beans:ref bean="adminLoginCheckInterceptor" />
   		</mvc:interceptor>
   	</mvc:interceptors>
    <!-- ======================== #인터셉터관련2. 끝  ======================== -->
</beans:beans>